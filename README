A project for Distributed System course at Polimi (2013)

For managing the pending tasks for each one of the modules we can write here but another
team mate needs to do (for instance, fixing a bug identified, an algorithm missing, etc) and then to put when thist task was finished.

=================
TASKS NOTATION
=================
The notation is the following:
Pending task has the symbol "-" in front of the task description.
Finished task hast the symbol "+" in front of the task description.

=================
Andrea Mambretti
=================
+Implement application simple module generating random and continuos calls to the application simulated
+Implement client reincarnation
-Create the client compound module (Client.ned) using the application module,invocation manager module failure module, network module. This file should be saved in the folder src>compmodules
-Create network simulation file for simulating client failures.
-Implement the client network module because it should be different from the replica one, it should be located on network folder of the project.

=================
Vinh The Hoang
=================
+Creation and test of a network description file for testing the replica module (ReplicaTest.ned)
	-Tests:
		-Put one client and one replica : Doing random operations (create several data items)
		-Put two clients and one replica : Doing random operations
		-Put two clients and one replica: One always read, and the other one always writes
		-Put two clients and one replica: Both writing
=================
Monica Lozano
=================
+Review the classes and build the destructors of each class
 + AppMsgGenerator
 + DataItemsManager
 + ReplicaWriteProtocol
 + WriteAheadProtocol
 + ReplicaNetwork
 	-Fix the part that delete the pointers of each message saved in the maps
+Fix the duplication of messages in the replica network
+Fix logic related to processing the output queue on the replica network
	-Test it
+Creation and test of a network description file for testing the replica module (ReplicaTest.ned)
+Creation and test of a ned for testing the remote write protocol (more than one replica)
	-Tests:
		-Put one client and 3 replicas: This test the remote update and the multicast functionality
		-Put two clients and 2 replicas: For testing a remote write.
-Files to delete: 
	-LogManager .cc, .h, .ned
	-BarkleySynch .cc, .h, .ned
	-AtomicMulticast .cc,.h, .ned
	-BasicMulticast .cc, .h, .ned

=================
DESIGN DOUBTS
=================
- Do we need to have the replication group manager simple module? NO, we can take it out from the middleware compound module
-Should we have one invocation manager for the client and another one for replica? YES, it should be the same as the client this will be implemented by Monica
-Do we need to create another message format for the network communication? NO

